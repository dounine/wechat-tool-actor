akka {
    loglevel = "INFO"
    http {
        host-connection-pool.max-connections = 1000
        host-connection-pool.idle-timeout = 5s
        host-connection-pool.client.idle-timeout = 5s
        client.connecting-timeout = 3s
        host-connection-pool.max-connection-lifetime = 3s
        server{
            idle-timeout = 10s
            request-timeout = 10s
        }
    }
    cluster {
        log-info = off
        log-info-verbose = off
        min-nr-of-members = 1
        shutdown-after-unsuccessful-join-seed-nodes = 60s

        sharding {
            number-of-shards = 30
            guardian-name = sharding
            # actor闲置后将自动关闭(关闭)
            passivate-idle-entity-after = off
        }
        bootstrap {
            new-cluster-enabled = on
        }
        # 开发专用、服务发现更快、方便调式、线上需要删掉。
        seed-nodes = ["akka://"${jb.name}"@127.0.0.1:25522"]
        min-nr-of-members = 1
        auto-down-unreachable-after = 10s
        seed-node-timeout = 10s
        shutdown-after-unsuccessful-join-seed-nodes = 20s
        http.route-providers-read-only = false
    }
    # 开发专用、服务发现更快、方便调式、线上需要删掉。
    remote.artery {
        enabled = on
        transport = tcp
        canonical {
          hostname = "127.0.0.1"
          port = 25522
        }
    }

    management {
        http.port = 8560
        cluster.bootstrap {
            contact-point-discovery {
              discovery-method = akka.discovery
              required-contact-point-nr = 1
            }
        }
    }
    persistence{
        journal {
            plugin = "akka.persistence.journal.leveldb"
            auto-start-journals = ["akka.persistence.journal.leveldb"]
            leveldb.dir = "target/journal"
        }
        snapshot-store {
            plugin = "jdbc-snapshot-store"
            auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
        }
    }

    actor {
      provider = cluster
      allow-java-serialization = off
      warn-about-java-serializer-usage = on
      serialize-messages = on
      serializers {
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "java.lang.Object" = kryo
        "scala.collection.immutable.Vector" = kryo
        "com.dounine.jb.model.BaseSerializer" = kryo
      }
    }
}
akka-persistence-jdbc {
    logicalDeletion.enable = false
    shared-databases {
        slick {
            profile = "slick.jdbc.MySQLProfile$"
            db {
                url = ${jb.db.url}
                user = ${jb.db.username}
                password = ${jb.db.password}
                driver = ${jb.db.driver}
            }
        }
    }
}
jdbc-journal {
    use-shared-db = "slick"
    tables.journal.tableName = "jb-journal"
}
jdbc-snapshot-store {
    use-shared-db = "slick"
    tables.snapshot.tableName = "jb-snapshot"
}
jdbc-read-journal {
    use-shared-db = "slick"
    tables.journal.tableName = "jb-journal"
}
jb {
    model = "prod"
    name = "jbserver"
    admins = "admin"
    qrcodePath = "/tmp"
    domain = "https://wxapi.61week.com"
    selenium {
        path = "/usr/local/bin/chromedriver"
        remoteUrl = "http://10.3.111.13:4444/wd/hub"
        implicitlyWait = 10
        proxy {
            port = 30001
        }
        size {
            width = 1000
            height = 600
        }
        pool {
            minIdle = 5
            maxIdle = 10
            maxTotal = 30
            maxWaitMillis = 60000
            minEvictableIdleTimeMillis = 600000
            timeBetweenEvictionRunsMillis = 1000
            testOnBorrow = true
            blockWhenExhausted = true
        }
    }
    log {
        upDown = on
        upDownManager = off
        virtualOrderEngine = off
        virtualOrderNotify = on
        virtualTriggerOrderNotify = off
        virtualPositionEngine = off
        virtualTriggerOrder = off
        huobiTradeDetail = off
        slider = on
        websocket = off
    }
    http {
        port = 8080
    }
    timeout {
        auth = 5s
    }
    proxy {
        enable = false
        host = "127.0.0.1"
        port = 1087
        timeout = 5s
    }
    jwt {
        secret = "hello"
        expire = 25920000
    }
    cache = "replicated"
    replicated = {
        queryTimeout = 10s
        deleteTimeout = 3s
    }
    redis {
        host = "192.168.1.182"
        port = 6379
        maxIdle = 20
        maxTotal = 100
        maxWaitMillis = -1
        password = ""
    }
    db {
        driver = "com.mysql.cj.jdbc.Driver"
        url = "jdbc:mysql://192.168.1.182:3306/db_jb?useUnicode=true&useSSL=false&characterEncoding=utf-8"
        username = "root"
        password = "root"
        hikaricp {
            minimumIdle = 10
            maximumPoolSize = 30
            connectionTimeout = 30
            idleTimeout = 10
            maxLifetime = 3600000
            connectionInitSql = "SELECT 1"
        }
    }
}
